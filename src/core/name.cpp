#include "name.h"

#define CASE(name)  \
case name:          \
return #name

const char* core::Name::getResultValue(CK_RV value)
{
    switch (value) {
        CASE(CKR_OK);
        CASE(CKR_CANCEL);
        CASE(CKR_HOST_MEMORY);
        CASE(CKR_SLOT_ID_INVALID);
        CASE(CKR_GENERAL_ERROR);
        CASE(CKR_FUNCTION_FAILED);
        CASE(CKR_ARGUMENTS_BAD);
        CASE(CKR_NO_EVENT);
        CASE(CKR_NEED_TO_CREATE_THREADS);
        CASE(CKR_CANT_LOCK);
        CASE(CKR_ATTRIBUTE_READ_ONLY);
        CASE(CKR_ATTRIBUTE_SENSITIVE);
        CASE(CKR_ATTRIBUTE_TYPE_INVALID);
        CASE(CKR_ATTRIBUTE_VALUE_INVALID);
        CASE(CKR_DATA_INVALID);
        CASE(CKR_DATA_LEN_RANGE);
        CASE(CKR_DEVICE_ERROR);
        CASE(CKR_DEVICE_MEMORY);
        CASE(CKR_DEVICE_REMOVED);
        CASE(CKR_ENCRYPTED_DATA_INVALID);
        CASE(CKR_ENCRYPTED_DATA_LEN_RANGE);
        CASE(CKR_FUNCTION_CANCELED);
        CASE(CKR_FUNCTION_NOT_PARALLEL);
        CASE(CKR_FUNCTION_NOT_SUPPORTED);
        CASE(CKR_KEY_HANDLE_INVALID);
        CASE(CKR_KEY_SIZE_RANGE);
        CASE(CKR_KEY_TYPE_INCONSISTENT);
        CASE(CKR_KEY_NOT_NEEDED);
        CASE(CKR_KEY_CHANGED);
        CASE(CKR_KEY_NEEDED);
        CASE(CKR_KEY_INDIGESTIBLE);
        CASE(CKR_KEY_FUNCTION_NOT_PERMITTED);
        CASE(CKR_KEY_NOT_WRAPPABLE);
        CASE(CKR_KEY_UNEXTRACTABLE);
        CASE(CKR_MECHANISM_INVALID);
        CASE(CKR_MECHANISM_PARAM_INVALID);
        CASE(CKR_OBJECT_HANDLE_INVALID);
        CASE(CKR_OPERATION_ACTIVE);
        CASE(CKR_OPERATION_NOT_INITIALIZED);
        CASE(CKR_PIN_INCORRECT);
        CASE(CKR_PIN_INVALID);
        CASE(CKR_PIN_LEN_RANGE);
        CASE(CKR_PIN_EXPIRED);
        CASE(CKR_PIN_LOCKED);
        CASE(CKR_SESSION_CLOSED);
        CASE(CKR_SESSION_COUNT);
        CASE(CKR_SESSION_HANDLE_INVALID);
        CASE(CKR_SESSION_PARALLEL_NOT_SUPPORTED);
        CASE(CKR_SESSION_READ_ONLY);
        CASE(CKR_SESSION_EXISTS);
        CASE(CKR_SESSION_READ_ONLY_EXISTS);
        CASE(CKR_SESSION_READ_WRITE_SO_EXISTS);
        CASE(CKR_SIGNATURE_INVALID);
        CASE(CKR_SIGNATURE_LEN_RANGE);
        CASE(CKR_TEMPLATE_INCOMPLETE);
        CASE(CKR_TEMPLATE_INCONSISTENT);
        CASE(CKR_TOKEN_NOT_PRESENT);
        CASE(CKR_TOKEN_NOT_RECOGNIZED);
        CASE(CKR_TOKEN_WRITE_PROTECTED);
        CASE(CKR_UNWRAPPING_KEY_HANDLE_INVALID);
        CASE(CKR_UNWRAPPING_KEY_SIZE_RANGE);
        CASE(CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT);
        CASE(CKR_USER_ALREADY_LOGGED_IN);
        CASE(CKR_USER_NOT_LOGGED_IN);
        CASE(CKR_USER_PIN_NOT_INITIALIZED);
        CASE(CKR_USER_TYPE_INVALID);
        CASE(CKR_USER_ANOTHER_ALREADY_LOGGED_IN);
        CASE(CKR_USER_TOO_MANY_TYPES);
        CASE(CKR_WRAPPED_KEY_INVALID);
        CASE(CKR_WRAPPED_KEY_LEN_RANGE);
        CASE(CKR_WRAPPING_KEY_HANDLE_INVALID);
        CASE(CKR_WRAPPING_KEY_SIZE_RANGE);
        CASE(CKR_WRAPPING_KEY_TYPE_INCONSISTENT);
        CASE(CKR_RANDOM_SEED_NOT_SUPPORTED);
        CASE(CKR_RANDOM_NO_RNG);
        CASE(CKR_DOMAIN_PARAMS_INVALID);
        CASE(CKR_BUFFER_TOO_SMALL);
        CASE(CKR_SAVED_STATE_INVALID);
        CASE(CKR_INFORMATION_SENSITIVE);
        CASE(CKR_STATE_UNSAVEABLE);
        CASE(CKR_CRYPTOKI_NOT_INITIALIZED);
        CASE(CKR_CRYPTOKI_ALREADY_INITIALIZED);
        CASE(CKR_MUTEX_BAD);
        CASE(CKR_MUTEX_NOT_LOCKED);
        CASE(CKR_NEW_PIN_MODE);
        CASE(CKR_NEXT_OTP);
        CASE(CKR_EXCEEDED_MAX_ITERATIONS);
        CASE(CKR_FIPS_SELF_TEST_FAILED);
        CASE(CKR_LIBRARY_LOAD_FAILED);
        CASE(CKR_PIN_TOO_WEAK);
        CASE(CKR_PUBLIC_KEY_INVALID);
        CASE(CKR_FUNCTION_REJECTED);
        default:
            return NULL;
    }
}

const char* core::Name::getAttribute(CK_ATTRIBUTE_TYPE value)
{
    switch (value) {
        CASE(CKA_CLASS);
        CASE(CKA_TOKEN);
        CASE(CKA_PRIVATE);
        CASE(CKA_LABEL);
        CASE(CKA_APPLICATION);
        CASE(CKA_VALUE);
        CASE(CKA_OBJECT_ID);
        CASE(CKA_CERTIFICATE_TYPE);
        CASE(CKA_ISSUER);
        CASE(CKA_SERIAL_NUMBER);
        CASE(CKA_AC_ISSUER);
        CASE(CKA_OWNER);
        CASE(CKA_ATTR_TYPES);
        CASE(CKA_TRUSTED);
        CASE(CKA_CERTIFICATE_CATEGORY);
        CASE(CKA_JAVA_MIDP_SECURITY_DOMAIN);
        CASE(CKA_URL);
        CASE(CKA_HASH_OF_SUBJECT_PUBLIC_KEY);
        CASE(CKA_HASH_OF_ISSUER_PUBLIC_KEY);
        CASE(CKA_NAME_HASH_ALGORITHM);
        CASE(CKA_CHECK_VALUE);
        CASE(CKA_KEY_TYPE);
        CASE(CKA_SUBJECT);
        CASE(CKA_ID);
        CASE(CKA_SENSITIVE);
        CASE(CKA_ENCRYPT);
        CASE(CKA_DECRYPT);
        CASE(CKA_WRAP);
        CASE(CKA_UNWRAP);
        CASE(CKA_SIGN);
        CASE(CKA_SIGN_RECOVER);
        CASE(CKA_VERIFY);
        CASE(CKA_VERIFY_RECOVER);
        CASE(CKA_DERIVE);
        CASE(CKA_START_DATE);
        CASE(CKA_END_DATE);
        CASE(CKA_MODULUS);
        CASE(CKA_MODULUS_BITS);
        CASE(CKA_PUBLIC_EXPONENT);
        CASE(CKA_PRIVATE_EXPONENT);
        CASE(CKA_PRIME_1);
        CASE(CKA_PRIME_2);
        CASE(CKA_EXPONENT_1);
        CASE(CKA_EXPONENT_2);
        CASE(CKA_COEFFICIENT);
        CASE(CKA_PRIME);
        CASE(CKA_SUBPRIME);
        CASE(CKA_BASE);
        CASE(CKA_PRIME_BITS);
        CASE(CKA_SUBPRIME_BITS);
        CASE(CKA_VALUE_BITS);
        CASE(CKA_VALUE_LEN);
        CASE(CKA_EXTRACTABLE);
        CASE(CKA_LOCAL);
        CASE(CKA_NEVER_EXTRACTABLE);
        CASE(CKA_ALWAYS_SENSITIVE);
        CASE(CKA_KEY_GEN_MECHANISM);
        CASE(CKA_MODIFIABLE);
        CASE(CKA_COPYABLE);
        CASE(CKA_EC_PARAMS);
        CASE(CKA_EC_POINT);
        CASE(CKA_SECONDARY_AUTH);
        CASE(CKA_AUTH_PIN_FLAGS);
        CASE(CKA_ALWAYS_AUTHENTICATE);
        CASE(CKA_WRAP_WITH_TRUSTED);
        CASE(CKA_WRAP_TEMPLATE);
        CASE(CKA_UNWRAP_TEMPLATE);
        CASE(CKA_DERIVE_TEMPLATE);
        CASE(CKA_OTP_FORMAT);
        CASE(CKA_OTP_LENGTH);
        CASE(CKA_OTP_TIME_INTERVAL);
        CASE(CKA_OTP_USER_FRIENDLY_MODE);
        CASE(CKA_OTP_CHALLENGE_REQUIREMENT);
        CASE(CKA_OTP_TIME_REQUIREMENT);
        CASE(CKA_OTP_COUNTER_REQUIREMENT);
        CASE(CKA_OTP_PIN_REQUIREMENT);
        CASE(CKA_OTP_COUNTER);
        CASE(CKA_OTP_TIME);
        CASE(CKA_OTP_USER_IDENTIFIER);
        CASE(CKA_OTP_SERVICE_IDENTIFIER);
        CASE(CKA_OTP_SERVICE_LOGO);
        CASE(CKA_OTP_SERVICE_LOGO_TYPE);
        CASE(CKA_GOSTR3410_PARAMS);
        CASE(CKA_GOSTR3411_PARAMS);
        CASE(CKA_GOST28147_PARAMS);
        CASE(CKA_HW_FEATURE_TYPE);
        CASE(CKA_RESET_ON_INIT);
        CASE(CKA_HAS_RESET);
        CASE(CKA_PIXEL_X);
        CASE(CKA_PIXEL_Y);
        CASE(CKA_RESOLUTION);
        CASE(CKA_CHAR_ROWS);
        CASE(CKA_CHAR_COLUMNS);
        CASE(CKA_COLOR);
        CASE(CKA_BITS_PER_PIXEL);
        CASE(CKA_CHAR_SETS);
        CASE(CKA_ENCODING_METHODS);
        CASE(CKA_MIME_TYPES);
        CASE(CKA_MECHANISM_TYPE);
        CASE(CKA_REQUIRED_CMS_ATTRIBUTES);
        CASE(CKA_DEFAULT_CMS_ATTRIBUTES);
        CASE(CKA_SUPPORTED_CMS_ATTRIBUTES);
        CASE(CKA_ALLOWED_MECHANISMS);
        default:
            return NULL;
    }
}

const char* core::Name::getMechanism(CK_MECHANISM_TYPE value)
{
    switch (value) {
        CASE(CKM_RSA_PKCS_KEY_PAIR_GEN);
        CASE(CKM_RSA_PKCS);
        CASE(CKM_RSA_9796);
        CASE(CKM_RSA_X_509);
        CASE(CKM_MD2_RSA_PKCS);
        CASE(CKM_MD5_RSA_PKCS);
        CASE(CKM_SHA1_RSA_PKCS);
        CASE(CKM_RIPEMD128_RSA_PKCS);
        CASE(CKM_RIPEMD160_RSA_PKCS);
        CASE(CKM_RSA_PKCS_OAEP);
        CASE(CKM_RSA_X9_31_KEY_PAIR_GEN);
        CASE(CKM_RSA_X9_31);
        CASE(CKM_SHA1_RSA_X9_31);
        CASE(CKM_RSA_PKCS_PSS);
        CASE(CKM_SHA1_RSA_PKCS_PSS);
        CASE(CKM_DSA_KEY_PAIR_GEN);
        CASE(CKM_DSA);
        CASE(CKM_DSA_SHA1);
        CASE(CKM_DSA_SHA224);
        CASE(CKM_DSA_SHA256);
        CASE(CKM_DSA_SHA384);
        CASE(CKM_DSA_SHA512);
        CASE(CKM_DH_PKCS_KEY_PAIR_GEN);
        CASE(CKM_DH_PKCS_DERIVE);
        CASE(CKM_X9_42_DH_KEY_PAIR_GEN);
        CASE(CKM_X9_42_DH_DERIVE);
        CASE(CKM_X9_42_DH_HYBRID_DERIVE);
        CASE(CKM_X9_42_MQV_DERIVE);
        CASE(CKM_SHA256_RSA_PKCS);
        CASE(CKM_SHA384_RSA_PKCS);
        CASE(CKM_SHA512_RSA_PKCS);
        CASE(CKM_SHA256_RSA_PKCS_PSS);
        CASE(CKM_SHA384_RSA_PKCS_PSS);
        CASE(CKM_SHA512_RSA_PKCS_PSS);
        CASE(CKM_SHA224_RSA_PKCS);
        CASE(CKM_SHA224_RSA_PKCS_PSS);
        CASE(CKM_RC2_KEY_GEN);
        CASE(CKM_RC2_ECB);
        CASE(CKM_RC2_CBC);
        CASE(CKM_RC2_MAC);
        CASE(CKM_RC2_MAC_GENERAL);
        CASE(CKM_RC2_CBC_PAD);
        CASE(CKM_RC4_KEY_GEN);
        CASE(CKM_RC4);
        CASE(CKM_DES_KEY_GEN);
        CASE(CKM_DES_ECB);
        CASE(CKM_DES_CBC);
        CASE(CKM_DES_MAC);
        CASE(CKM_DES_MAC_GENERAL);
        CASE(CKM_DES_CBC_PAD);
        CASE(CKM_DES2_KEY_GEN);
        CASE(CKM_DES3_KEY_GEN);
        CASE(CKM_DES3_ECB);
        CASE(CKM_DES3_CBC);
        CASE(CKM_DES3_MAC);
        CASE(CKM_DES3_MAC_GENERAL);
        CASE(CKM_DES3_CBC_PAD);
        CASE(CKM_DES3_CMAC_GENERAL);
        CASE(CKM_DES3_CMAC);
        CASE(CKM_CDMF_KEY_GEN);
        CASE(CKM_CDMF_ECB);
        CASE(CKM_CDMF_CBC);
        CASE(CKM_CDMF_MAC);
        CASE(CKM_CDMF_MAC_GENERAL);
        CASE(CKM_CDMF_CBC_PAD);
        CASE(CKM_DES_OFB64);
        CASE(CKM_DES_OFB8);
        CASE(CKM_DES_CFB64);
        CASE(CKM_DES_CFB8);
        CASE(CKM_MD2);
        CASE(CKM_MD5_HMAC);
        CASE(CKM_MD5_HMAC_GENERAL);
        CASE(CKM_SHA_1);
        CASE(CKM_SHA_1_HMAC);
        CASE(CKM_SHA_1_HMAC_GENERAL);
        CASE(CKM_RIPEMD128);
        CASE(CKM_RIPEMD128_HMAC);
        CASE(CKM_RIPEMD128_HMAC_GENERAL);
        CASE(CKM_RIPEMD160);
        CASE(CKM_RIPEMD160_HMAC);
        CASE(CKM_RIPEMD160_HMAC_GENERAL);
        CASE(CKM_SHA256);
        CASE(CKM_SHA256_HMAC);
        CASE(CKM_SHA256_HMAC_GENERAL);
        CASE(CKM_SHA224);
        CASE(CKM_SHA224_HMAC);
        CASE(CKM_SHA224_HMAC_GENERAL);
        CASE(CKM_SHA384);
        CASE(CKM_SHA384_HMAC);
        CASE(CKM_SHA384_HMAC_GENERAL);
        CASE(CKM_SHA512);
        CASE(CKM_SHA512_HMAC);
        CASE(CKM_SHA512_HMAC_GENERAL);
        CASE(CKM_SECURID_KEY_GEN);
        CASE(CKM_SECURID);
        CASE(CKM_HOTP_KEY_GEN);
        CASE(CKM_HOTP);
        CASE(CKM_ACTI);
        CASE(CKM_ACTI_KEY_GEN);
        CASE(CKM_CAST_KEY_GEN);
        CASE(CKM_CAST_ECB);
        CASE(CKM_CAST_CBC);
        CASE(CKM_CAST_MAC);
        CASE(CKM_CAST_MAC_GENERAL);
        CASE(CKM_CAST_CBC_PAD);
        CASE(CKM_CAST3_KEY_GEN);
        CASE(CKM_CAST3_ECB);
        CASE(CKM_CAST3_CBC);
        CASE(CKM_CAST3_MAC);
        CASE(CKM_CAST3_MAC_GENERAL);
        CASE(CKM_CAST3_CBC_PAD);
        CASE(CKM_CAST128_KEY_GEN);
        CASE(CKM_CAST128_ECB);
        CASE(CKM_CAST128_CBC);
        CASE(CKM_CAST128_MAC);
        CASE(CKM_CAST128_MAC_GENERAL);
        CASE(CKM_CAST128_CBC_PAD);
        CASE(CKM_RC5_KEY_GEN);
        CASE(CKM_RC5_ECB);
        CASE(CKM_RC5_CBC);
        CASE(CKM_RC5_MAC);
        CASE(CKM_RC5_MAC_GENERAL);
        CASE(CKM_RC5_CBC_PAD);
        CASE(CKM_IDEA_KEY_GEN);
        CASE(CKM_IDEA_ECB);
        CASE(CKM_IDEA_CBC);
        CASE(CKM_IDEA_MAC);
        CASE(CKM_IDEA_MAC_GENERAL);
        CASE(CKM_IDEA_CBC_PAD);
        CASE(CKM_GENERIC_SECRET_KEY_GEN);
        CASE(CKM_CONCATENATE_BASE_AND_KEY);
        CASE(CKM_CONCATENATE_BASE_AND_DATA);
        CASE(CKM_CONCATENATE_DATA_AND_BASE);
        CASE(CKM_XOR_BASE_AND_DATA);
        CASE(CKM_EXTRACT_KEY_FROM_KEY);
        CASE(CKM_SSL3_PRE_MASTER_KEY_GEN);
        CASE(CKM_SSL3_MASTER_KEY_DERIVE);
        CASE(CKM_SSL3_KEY_AND_MAC_DERIVE);
        CASE(CKM_SSL3_MASTER_KEY_DERIVE_DH);
        CASE(CKM_TLS_PRE_MASTER_KEY_GEN);
        CASE(CKM_TLS_MASTER_KEY_DERIVE);
        CASE(CKM_TLS_KEY_AND_MAC_DERIVE);
        CASE(CKM_TLS_MASTER_KEY_DERIVE_DH);
        CASE(CKM_TLS_PRF);
        CASE(CKM_SSL3_MD5_MAC);
        CASE(CKM_SSL3_SHA1_MAC);
        CASE(CKM_MD5_KEY_DERIVATION);
        CASE(CKM_MD2_KEY_DERIVATION);
        CASE(CKM_SHA1_KEY_DERIVATION);
        CASE(CKM_SHA256_KEY_DERIVATION);
        CASE(CKM_SHA384_KEY_DERIVATION);
        CASE(CKM_SHA512_KEY_DERIVATION);
        CASE(CKM_SHA224_KEY_DERIVATION);
        CASE(CKM_PBE_MD2_DES_CBC);
        CASE(CKM_PBE_MD5_DES_CBC);
        CASE(CKM_PBE_MD5_CAST_CBC);
        CASE(CKM_PBE_MD5_CAST3_CBC);
        CASE(CKM_PBE_MD5_CAST128_CBC);
        CASE(CKM_PBE_SHA1_CAST128_CBC);
        CASE(CKM_PBE_SHA1_RC4_128);
        CASE(CKM_PBE_SHA1_RC4_40);
        CASE(CKM_PBE_SHA1_DES3_EDE_CBC);
        CASE(CKM_PBE_SHA1_DES2_EDE_CBC);
        CASE(CKM_PBE_SHA1_RC2_128_CBC);
        CASE(CKM_PBE_SHA1_RC2_40_CBC);
        CASE(CKM_PKCS5_PBKD2);
        CASE(CKM_PBA_SHA1_WITH_SHA1_HMAC);
        CASE(CKM_WTLS_PRE_MASTER_KEY_GEN);
        CASE(CKM_WTLS_MASTER_KEY_DERIVE);
        CASE(CKM_WTLS_MASTER_KEY_DERIVE_DH_ECC);
        CASE(CKM_WTLS_PRF);
        CASE(CKM_WTLS_SERVER_KEY_AND_MAC_DERIVE);
        CASE(CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE);
        CASE(CKM_KEY_WRAP_LYNKS);
        CASE(CKM_KEY_WRAP_SET_OAEP);
        CASE(CKM_CMS_SIG);
        CASE(CKM_KIP_DERIVE);
        CASE(CKM_KIP_WRAP);
        CASE(CKM_KIP_MAC);
        CASE(CKM_CAMELLIA_KEY_GEN);
        CASE(CKM_CAMELLIA_ECB);
        CASE(CKM_CAMELLIA_CBC);
        CASE(CKM_CAMELLIA_MAC);
        CASE(CKM_CAMELLIA_MAC_GENERAL);
        CASE(CKM_CAMELLIA_CBC_PAD);
        CASE(CKM_CAMELLIA_ECB_ENCRYPT_DATA);
        CASE(CKM_CAMELLIA_CBC_ENCRYPT_DATA);
        CASE(CKM_CAMELLIA_CTR);
        CASE(CKM_ARIA_KEY_GEN);
        CASE(CKM_ARIA_ECB);
        CASE(CKM_ARIA_CBC);
        CASE(CKM_ARIA_MAC);
        CASE(CKM_ARIA_MAC_GENERAL);
        CASE(CKM_ARIA_CBC_PAD);
        CASE(CKM_ARIA_ECB_ENCRYPT_DATA);
        CASE(CKM_ARIA_CBC_ENCRYPT_DATA);
        CASE(CKM_SEED_KEY_GEN);
        CASE(CKM_SEED_ECB);
        CASE(CKM_SEED_CBC);
        CASE(CKM_SEED_MAC);
        CASE(CKM_SEED_MAC_GENERAL);
        CASE(CKM_SEED_CBC_PAD);
        CASE(CKM_SEED_ECB_ENCRYPT_DATA);
        CASE(CKM_SEED_CBC_ENCRYPT_DATA);
        CASE(CKM_SKIPJACK_KEY_GEN);
        CASE(CKM_SKIPJACK_ECB64);
        CASE(CKM_SKIPJACK_CBC64);
        CASE(CKM_SKIPJACK_OFB64);
        CASE(CKM_SKIPJACK_CFB64);
        CASE(CKM_SKIPJACK_CFB32);
        CASE(CKM_SKIPJACK_CFB16);
        CASE(CKM_SKIPJACK_CFB8);
        CASE(CKM_SKIPJACK_WRAP);
        CASE(CKM_SKIPJACK_PRIVATE_WRAP);
        CASE(CKM_SKIPJACK_RELAYX);
        CASE(CKM_KEA_KEY_PAIR_GEN);
        CASE(CKM_KEA_KEY_DERIVE);
        CASE(CKM_FORTEZZA_TIMESTAMP);
        CASE(CKM_BATON_KEY_GEN);
        CASE(CKM_BATON_ECB128);
        CASE(CKM_BATON_ECB96);
        CASE(CKM_BATON_CBC128);
        CASE(CKM_BATON_COUNTER);
        CASE(CKM_BATON_SHUFFLE);
        CASE(CKM_BATON_WRAP);
        CASE(CKM_EC_KEY_PAIR_GEN);
        CASE(CKM_ECDSA);
        CASE(CKM_ECDSA_SHA1);
        CASE(CKM_ECDSA_SHA224);
        CASE(CKM_ECDSA_SHA256);
        CASE(CKM_ECDSA_SHA384);
        CASE(CKM_ECDSA_SHA512);
        CASE(CKM_ECDH1_DERIVE);
        CASE(CKM_ECDH1_COFACTOR_DERIVE);
        CASE(CKM_ECMQV_DERIVE);
        CASE(CKM_JUNIPER_KEY_GEN);
        CASE(CKM_JUNIPER_ECB128);
        CASE(CKM_JUNIPER_CBC128);
        CASE(CKM_JUNIPER_COUNTER);
        CASE(CKM_JUNIPER_SHUFFLE);
        CASE(CKM_JUNIPER_WRAP);
        CASE(CKM_FASTHASH);
        CASE(CKM_AES_KEY_GEN);
        CASE(CKM_AES_ECB);
        CASE(CKM_AES_CBC);
        CASE(CKM_AES_MAC);
        CASE(CKM_AES_MAC_GENERAL);
        CASE(CKM_AES_CBC_PAD);
        CASE(CKM_AES_CTR);
        CASE(CKM_AES_CTS);
        CASE(CKM_AES_CMAC);
        CASE(CKM_AES_CMAC_GENERAL);
        CASE(CKM_TWOFISH_KEY_GEN);
        CASE(CKM_TWOFISH_CBC);
        CASE(CKM_AES_GCM);
        CASE(CKM_AES_CCM);
        CASE(CKM_AES_KEY_WRAP);
        CASE(CKM_AES_KEY_WRAP_PAD);
        CASE(CKM_BLOWFISH_CBC_PAD);
        CASE(CKM_TWOFISH_CBC_PAD);
        CASE(CKM_DES_ECB_ENCRYPT_DATA);
        CASE(CKM_DES_CBC_ENCRYPT_DATA);
        CASE(CKM_DES3_ECB_ENCRYPT_DATA);
        CASE(CKM_DES3_CBC_ENCRYPT_DATA);
        CASE(CKM_AES_ECB_ENCRYPT_DATA);
        CASE(CKM_AES_CBC_ENCRYPT_DATA);
        CASE(CKM_GOSTR3410_KEY_PAIR_GEN);
        CASE(CKM_GOSTR3410);
        CASE(CKM_GOSTR3410_WITH_GOSTR3411);
        CASE(CKM_GOSTR3410_KEY_WRAP);
        CASE(CKM_GOSTR3410_DERIVE);
        CASE(CKM_GOSTR3411);
        CASE(CKM_GOSTR3411_HMAC);
        CASE(CKM_GOST28147_KEY_GEN);
        CASE(CKM_GOST28147_ECB);
        CASE(CKM_GOST28147);
        CASE(CKM_GOST28147_MAC);
        CASE(CKM_GOST28147_KEY_WRAP);
        CASE(CKM_DSA_PARAMETER_GEN);
        CASE(CKM_DH_PKCS_PARAMETER_GEN);
        CASE(CKM_X9_42_DH_PARAMETER_GEN);
        CASE(CKM_AES_OFB);
        CASE(CKM_AES_CFB64);
        CASE(CKM_AES_CFB8);
        CASE(CKM_AES_CFB128);
        CASE(CKM_RSA_PKCS_TPM_1_1);
        CASE(CKM_RSA_PKCS_OAEP_TPM_1_1);
        default:
            return "CKM_UNKNOWN";
    }
}
